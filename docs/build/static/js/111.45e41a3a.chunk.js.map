{"version":3,"file":"static/js/111.45e41a3a.chunk.js","mappings":"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","sources":["Form/Form.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Autocomplete,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\n\r\nfunction Form() {\r\n  const API_URL = \"https://interview.switcheo.com/prices.json\";\r\n  const [data, setData] = useState();\r\n  const [currentCurrency, setCurrentCurrency] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [autocompleteValue, setAutocompleteValue] = useState(null);\r\n\r\n  const sendRef = useRef(\"\");\r\n  const receiveRef = useRef(\"\");\r\n  const currencyRef = useRef(\"\");\r\n\r\n  const [sendErrorHelper, setSendErrorHelper] = useState({});\r\n  const [receiveErrorHelper, setReceiveErrorHelper] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(API_URL)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        setData(json);\r\n      });\r\n  }, []);\r\n\r\n  var currencies = [];\r\n\r\n  if (data) {\r\n    currencies = data.map((currency, i) => ({\r\n      id: i + 1,\r\n      currency: currency.currency,\r\n      label: currency.currency,\r\n      price: currency.price,\r\n    }));\r\n  }\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      console.log(sendRef.current.value);\r\n      console.log(currencyRef.current.value);\r\n      console.log(receiveRef.current.value);\r\n      sendRef.current.value = \"\";\r\n      receiveRef.current.value = \"\";\r\n\r\n      setCurrentCurrency({});\r\n      setAutocompleteValue(null);\r\n\r\n      setIsLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleAmountToSendChange = (e) => {\r\n    let value = Number(e.target.value);\r\n    if (isNaN(value) || value < 0) {\r\n      setSendErrorHelper({\r\n        error: true,\r\n        helperText: \"Please enter a valid non-negative number\",\r\n      });\r\n      receiveRef.current.value = \"\";\r\n    } else {\r\n      setSendErrorHelper({\r\n        error: false,\r\n      });\r\n      if (currentCurrency && currentCurrency.price) {\r\n        let receivedAmount =\r\n          Math.round(value * currentCurrency.price * 100) / 100;\r\n        receiveRef.current.value = isNaN(receivedAmount) ? \"\" : receivedAmount;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAmountToReceiveChange = (e) => {\r\n    let value = Number(e.target.value);\r\n    if (isNaN(value) || value < 0) {\r\n      setReceiveErrorHelper({\r\n        error: true,\r\n        helperText: \"Please enter a valid non-negative number\",\r\n      });\r\n      sendRef.current.value = \"\";\r\n    } else {\r\n      setReceiveErrorHelper({\r\n        error: false,\r\n      });\r\n      if (currentCurrency && currentCurrency.price) {\r\n        let sentAmount =\r\n          Math.round((value / currentCurrency.price) * 100) / 100;\r\n        sendRef.current.value = isNaN(sentAmount) ? \"\" : sentAmount;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCurrencyChange = (e, value) => {\r\n    setCurrentCurrency(value);\r\n    setAutocompleteValue(value);\r\n    if (value && value.price) {\r\n      if (sendRef.current.value) {\r\n        let receivedAmount =\r\n          Math.round(sendRef.current.value * value.price * 100) / 100;\r\n        receiveRef.current.value = isNaN(receivedAmount) ? \"\" : receivedAmount;\r\n      } else if (receiveRef.current.value) {\r\n        let sentAmount =\r\n          Math.round((receiveRef.current.value / value.price) * 100) / 100;\r\n        sendRef.current.value = isNaN(sentAmount) ? \"\" : sentAmount;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onSubmit}>\r\n      <h4>Swap from USD</h4>\r\n\r\n      <TextField\r\n        label=\"Amount to send\"\r\n        variant=\"outlined\"\r\n        sx={{ width: 300 }}\r\n        type=\"number\"\r\n        onChange={handleAmountToSendChange}\r\n        inputRef={sendRef}\r\n        error={sendErrorHelper.error}\r\n        helperText={sendErrorHelper.helperText}\r\n        value={sendRef.current.value || \"\"}\r\n        InputLabelProps={\r\n          sendRef.current.value ? { shrink: true } : { shrink: false }\r\n        }\r\n      />\r\n      <br />\r\n      <Autocomplete\r\n        options={currencies}\r\n        getOptionKey={(option) => option.id}\r\n        isOptionEqualToValue={(option, value) =>\r\n          option.currency === value.currency\r\n        }\r\n        onChange={handleCurrencyChange}\r\n        value={autocompleteValue}\r\n        sx={{ width: 300, marginTop: 2 }}\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Currency\" inputRef={currencyRef} />\r\n        )}\r\n      />\r\n      <br />\r\n      <TextField\r\n        label=\"Amount to receive\"\r\n        variant=\"outlined\"\r\n        sx={{ width: 300, marginBottom: 2 }}\r\n        type=\"number\"\r\n        onChange={handleAmountToReceiveChange}\r\n        inputRef={receiveRef}\r\n        error={receiveErrorHelper.error}\r\n        helperText={receiveErrorHelper.helperText}\r\n        value={receiveRef.current.value || \"\"}\r\n        InputLabelProps={\r\n          receiveRef.current.value ? { shrink: true } : { shrink: false }\r\n        }\r\n      />\r\n      <br />\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"submit\"\r\n        disabled={isLoading}\r\n        startIcon={isLoading ? <CircularProgress size={20} /> : null}\r\n      >\r\n        {isLoading ? \"PROCESSING...\" : \"CONFIRM SWAP\"}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n"],"names":["data","setData","useState","currentCurrency","setCurrentCurrency","isLoading","setIsLoading","autocompleteValue","setAutocompleteValue","sendRef","useRef","receiveRef","currencyRef","sendErrorHelper","setSendErrorHelper","receiveErrorHelper","setReceiveErrorHelper","useEffect","fetch","then","res","json","currencies","map","currency","i","id","label","price","_jsxs","className","onSubmit","e","preventDefault","setTimeout","console","log","current","value","children","_jsx","TextField","variant","sx","width","type","onChange","Number","target","isNaN","error","helperText","receivedAmount","Math","round","inputRef","InputLabelProps","shrink","Autocomplete","options","getOptionKey","option","isOptionEqualToValue","handleCurrencyChange","sentAmount","marginTop","renderInput","params","marginBottom","Button","disabled","startIcon","CircularProgress","size"],"sourceRoot":""}